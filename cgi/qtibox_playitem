#!/usr/bin/perl -w
use strict;
use EPrints;
use HTTP::Request::Common;
use LWP::UserAgent;
use Data::Dumper;
use Archive::Zip;

my $qtiengine_host = "qtiengine.qtitools.org";

my $session = EPrints::Session->new();
my $docid = $session->param("docid");

if (!defined($docid)) {
	return;
}

my $doc = EPrints::DataObj::Document->new($session, $docid);

# user agent object
my $ua = LWP::UserAgent->new();
$ua->max_redirect(0);

my $url = "/application/upload";
my @content = [$doc->local_path() . "/" . $doc->get_value("main")];

if ($doc->get_value("main") =~ /\.zip$/) {
	# if a content package, abort if it's got more than one item (or a test) 
	# or get the single item's xml
	my $data = contentpackage_singleitem_xml($doc);
	if ($data) {
		# upload just the one XML file from the zip
		@content = [undef, "uploaded.xml", Content_Type => "application/xml", Content => $data];
	}
}

# request object
my $req = POST("http://" . $qtiengine_host . $url, Content_Type => "form-data", Content => [uploadedContent => @content]);

# make requests until we're redirected to the preview page
while (1) {
	#print STDERR "sending request:\n\n";
	#print STDERR $req->as_string();
	my $res = $ua->request($req);

	if (!$res->is_redirect()) {
		die("Didn't get a redirection to the QTIEngine preview page. Last page was $url");
		last;
	}

	# assuming the Location header points to something valid
	$url = $res->header("Location");

	# stop if we're at the preview page
	if ($url =~ /^http:\/\/$qtiengine_host\/(item\/play\/0|test\/sessionplay);/) {
		last;
	}

	# redirect
	$req = GET($url);
}

$session->redirect($url);
$session->terminate();

# return the item xml if it's a single item content package, otherwise 0
sub contentpackage_singleitem_xml {
	my ($doc) = @_;

	my $zip = Archive::Zip->new($doc->local_path() . "/" . $doc->get_value("main"));
	my $manifestxml = $zip->contents("imsmanifest.xml");
	if (!defined $manifestxml) {
		print STDERR "qtibox: error getting manifest\n";
		return 0;
	}
	my $dom = eval {
		EPrints::XML::parse_xml_string($manifestxml);
	};
	if ($@) {
		my $err = $@;
		$err =~ s# at /.*##;
		print STDERR "qtibox: error parsing manifest XML\n";
		return 0;
	}

	# get resources
	my $resources = $dom->getElementsByTagName("resource");
	if ($resources->getLength > 1) {
		return 0;
	} elsif ($resources->getLength == 0) {
		print STDERR "qtibox: no resources found\n";
		return 0;
	}

	# check resource type is item rather than assessment
	if ($resources->item(0)->getAttributeNode("type")->getValue !~ /^imsqti_item_/) {
		return 0;
	}

	# return the XML it points to
	my $xmlfilename = $resources->item(0)->getAttributeNode("href")->getValue;
	my $xml = $zip->contents($xmlfilename);
	if (!defined $xml) {
		print STDERR "qtibox: error getting contents of file '$xmlfilename'\n";
		return 0;
	}
	return $xml;
}

exit;
